
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE_LAYER 0
#define NAVMOD_LAYER 1
#define BT_SEL_LAYER 2
#define SHIFTED_LAYER 3
#define FN_LAYER 4
#define CTRLNAV_LAYER 5
#define SHIFTCTRLNAV_LAYER 6

&sk {
    release-after-ms = <2000>;
};

/ {

    behaviors {
        td_lshft: lshft_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LSHFT>, <&kt LSHFT>;
        };
        td_lctrl: lctrl_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LCTRL>, <&kt LCTRL>;
        };
        td_lgui: lgui_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LSHFT>, <&kt LSHFT>;
        };
        td_lalt: lalt_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LALT>, <&kt LALT>;
        };
        td_navmodlayer: navmod_layer_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo NAVMOD_LAYER>, <&tog NAVMOD_LAYER>;
        };
        td_seminav: seminav_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SEMI>, <&mo CTRLNAV_LAYER>, <&mo SHIFTCTRLNAV_LAYER>;
        };
        td_r_shifted: r_shifted_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp R>, <&mo SHIFTED_LAYER>;
        };
        td_e_shifted: e_shifted_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp E>, <&mo SHIFTED_LAYER>;
        };
        td_i_shifted: i_shifted_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp I>, <&mo SHIFTED_LAYER>;
        };
        td_u_shifted: u_shifted_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp U>, <&mo SHIFTED_LAYER>;
        };
        td_j_shifted: j_shifted_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp J>, <&mo SHIFTED_LAYER>;
        };

    };

    combos {
        compatible = "zmk,combos";
//NUMBER ROW COMBOS//
// Use E and R for the left hand, and U, I, and J for the right hand
        combo_grave {
            timeout-ms = <20>;
            key-positions = <3 0>;
            bindings = <&kp GRAVE>;
        };         
        combo_one {
            timeout-ms = <20>;
            key-positions = <3 10>;
            bindings = <&kp N1>;
        };
         combo_two {
            timeout-ms = <20>;
            key-positions = <3 11>;
            bindings = <&kp N2>;
         };
          combo_three {
            timeout-ms = <20>;
            key-positions = <3 12>;
            bindings = <&kp N3>;
        };
          combo_four {
            timeout-ms = <20>;
            key-positions = <2 13>;
            bindings = <&kp N4>;
        };
          combo_five {
            timeout-ms = <20>;
            key-positions = <2 14>;
            bindings = <&kp N5>;
        };
        combo_six {
            timeout-ms = <20>;
            key-positions = <7 15>;
            bindings = <&kp N6>;
        };
        combo_seven {
            timeout-ms = <20>;
            key-positions = <7 16>;
            bindings = <&kp N7>;
        };
        combo_eight {
            timeout-ms = <20>;
            key-positions = <6 17>;
            bindings = <&kp N8>;
        };
        combo_nine {
            timeout-ms = <20>;
            key-positions = <6 18>;
            bindings = <&kp N9>;
        };
        combo_zero {
            timeout-ms = <20>;
            key-positions = <6 19>;
            bindings = <&kp N0>;
        };
        combo_minus {
            timeout-ms = <50>;
            key-positions = <16 28>;
            bindings = <&kp MINUS>;
        };    
        combo_equal {
            timeout-ms = <50>;
            key-positions = <16 29>;
            bindings = <&kp EQUAL>;
        };
        
//SYMBOL COMBOS//
        combo_singe_quote {
            timeout-ms = <20>;
            key-positions = <9 16>;
            bindings = <&kp SQT>;
        };
        combo_backslash {
            timeout-ms = <20>;
            key-positions = <6 7>;
            bindings = <&kp BSLH>;
        };
        combo_left_bracket {
            timeout-ms = <20>;
            key-positions = <6 8>;
            bindings = <&kp LBKT>;
        };
        combo_right_bracket {
            timeout-ms = <20>;
            key-positions = <6 9>;
            bindings = <&kp RBKT>;
        };

//NAVIGATION COMBOS//
        combo_left {
            timeout-ms = <20>;
            key-positions = <19 15>;
            bindings = <&kp LEFT>;
        };
        combo_down {
            timeout-ms = <20>;
            key-positions = <19 16>;
            bindings = <&kp DOWN>;
        };
        combo_up {
            timeout-ms = <20>;
            key-positions = <19 17>;
            bindings = <&kp UP>;
        };
        combo_right {
            timeout-ms = <20>;
            key-positions = <19 18>;
            bindings = <&kp RIGHT>;
        };
        combo_home {
            timeout-ms = <20>;
            key-positions = <19 25>;
            bindings = <&kp HOME>;
        };
        combo_page_down {
            timeout-ms = <20>;
            key-positions = <19 26>;
            bindings = <&kp PGDN>;
        };
        combo_page_up {
            timeout-ms = <20>;
            key-positions = <19 27>;
            bindings = <&kp PGUP>;
        };
        combo_end {
            timeout-ms = <20>;
            key-positions = <19 28>;
            bindings = <&kp END>;
        };

//SPECIAL KEY COMBOS//
        combo_escape {
            timeout-ms = <20>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <20>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        combo_delete {
            timeout-ms = <20>;
            key-positions = <7 8>;
            bindings = <&kp DEL>;
        };
        combo_lctrldelete {
            timeout-ms = <20>;
            key-positions = <6 7 8>;
            bindings = <&kp LC(DEL)>;
        };
        combo_backspace {
            timeout-ms = <20>;
            key-positions = <17 18>;
            bindings = <&kp BSPC>;
        };
        combo_lctrlbackspace {
            timeout-ms = <20>;
            key-positions = <16 17 18>;
            bindings = <&kp LC(BSPC)>;
        };
        combo_enter {
            timeout-ms = <20>;
            key-positions = <27 28>;
            bindings = <&kp ENTER>;
        };
        combo_printscreen {
            timeout-ms = <20>;
            key-positions = <7 8 9>;
            bindings = <&kp PSCRN>;
        };

//MOUSE KEY COMBOS//
        combo_left_click {
            timeout-ms = <20>;
            key-positions = <1 2>;
            bindings = <&mkp LCLK>;
        };
        combo_right_click {
            timeout-ms = <20>;
            key-positions = <2 3>;
            bindings = <&kp RCLK>;
        };
        combo_middle_click {
            timeout-ms = <20>;
            key-positions = <1 2 3>;
            bindings = <&mkp MCLK>;
        };

//POWER AND OUTPUT CONTROL COMBOS//
        combo_external_power_on {
            timeout-ms = <20>;
            key-positions = <30 31 32>;
            bindings = <&ext_power EP_ON>;
        };
        combo_external_power_off {
            timeout-ms = <20>;
            key-positions = <30 32>;
            bindings = <&ext_power EP_OFF>;
        };
        combo_output_bluetooth {
            timeout-ms = <20>;
            key-positions = <0 4>;
            bindings = <&out OUT_BLE>;
        };
        combo_output_usb {
            timeout-ms = <20>;
            key-positions = <10 14>;
            bindings = <&out OUT_USB>;
        };

//BOOTLOADER RESET COMBOS//
        combo_sys_reset_left {
            timeout-ms = <50>;
            key-positions = <20 24>;
            bindings = <&bootloader>;
        };    
        combo_sys_reset_right {
            timeout-ms = <50>;
            key-positions = <25 29>;
            bindings = <&bootloader>;
        };


    };

    keymap {
                compatible = "zmk,keymap";

// ----------------------------BASE LAYER---------------------------------------------------------

                BASE_LAYER {
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//         | LCTRL | GUI | LSHFT |   | SPC | RALT | RCTRL |
                        bindings = <
   &kp Q &kp W &td_e_shifted &td_r_shifted &kp T   &kp Y &td_u_shifted  &td_i_shifted     &kp O   &kp P
   &kp A &kp S &kp D &kp F &kp G   &kp H &td_j_shifted  &kp K     &kp L   &td_seminav
   &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH
     &kp LCTRL &kp GUI &kp LSHFT   &kp SPACE &td_navmodlayer  &kp RALT
                        >;
                };
// --------------------------NAVIGATION LAYER--------------------------------------------------

                NAVMOD_LAYER {
                        bindings = <
      &trans  &trans  &trans  &trans  &trans    &kp K_PLAY_PAUSE  &kp K_VOL_DN  &kp K_VOL_UP  &kp K_MUTE  &trans   
   &td_lshft  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT    &trans 
   &td_lctrl  &td_lgui  &td_lalt  &trans  &trans    &kp HOME  &kp PGDN  &kp PGUP  &kp END &trans    
                &mo FN_LAYER  &mo BT_SEL_LAYER  &trans    &trans  &trans  &trans
                        >;
                };
// --------------------------BT SELECTION LAYER-----------------------------------------------------------

                BT_SEL_LAYER {
                        bindings = <
                         &trans  &trans  &trans  &trans  &bt BT_CLR  &trans  &trans  &trans  &trans  &trans
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans
                             &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                             &trans  &trans  &trans  &trans  &trans  &trans  
                        >;
                };

// -----------------------------SHIFTED LAYER-----------------------------------------------------------

                SHIFTED_LAYER {
                        bindings = <
    &kp TILDE  &trans  &trans  &trans    &trans  &trans  &trans  &kp PIPE  &kp LBRC  &kp RBRC
    &kp EXCL  &kp AT  &kp HASH  &kp DLLR    &kp PRCNT  &kp CARET  &kp AMPS  &kp ASTRK  &kp LPAR  &kp RPAR
    &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp UNDER  &kp PLUS
            &trans  &trans  &trans    &trans  &trans  &trans  
                        >;
                };

// -----------------------------FUNCTION KEY LAYER-----------------------------------------------------------

                FN_LAYER {
                        bindings = <
    &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
    &td_lshft  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &kp F11  &kp F12
    &td_lctrl  &td_lgui  &td_lalt  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                    &trans  &trans  &trans    &trans  &trans  &trans
                        >;
                };

// --------------------------CTRL NAV LAYER--------------------------------------------------

                CTRLNAV_LAYER {
                        bindings = <
      &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   
   &td_lshft  &trans  &trans  &trans  &trans    &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)    &kp LC(RIGHT)    &trans 
   &td_lctrl  &td_lgui  &td_lalt  &trans  &trans    &kp LC(HOME)  &kp LC(PGDN)  &kp LC(PGUP)  &kp LC(END) &trans    
                &trans  &trans  &trans    &trans  &trans  &trans
                        >;
                };

// --------------------------SHIFT CTRL NAV LAYER--------------------------------------------------

                SHIFTCTRLNAV_LAYER {
                        bindings = <
      &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   
   &td_lshft  &trans  &trans  &trans  &trans    &kp LS(LC(LEFT))  &kp LS(LC(DOWN))  &kp LS(LC(UP))    &kp LS(LC(RIGHT))    &trans 
   &td_lctrl  &td_lgui  &td_lalt  &trans  &trans    &kp LS(LC(HOME))  &kp LS(LC(PGDN))  &kp LS(LC(PGUP))  &kp LS(LC(END)) &trans    
                &trans  &trans  &trans    &trans  &trans  &trans
                        >;
                };

    };

};

